#!/usr/bin/env bash

print_usage() {
  echo -e "Unsupported option: $@"
  echo -e "Supported options:"
  echo -e "\t-u, --update          \tUpdate all plugins."
  echo -e "\t-n, --non-interactive \tDon't show vim while installing plugins."
}

INTERACTIVE=1
UPDATE=0

while [[ $# > 0 ]]
do
  key="$1"

  case $key in
    -n|--non-interactive)
      INTERACTIVE=0
      shift
      ;;
    -u|--update)
      UPDATE=1
      shift
      ;;
    *)
      print_usage $key
      exit 1
      ;;
  esac
  shift
done

FILES_TO_LINK="vimrc"
LOCALS=".vimrc.local.before .vimrc.local .vimrc.local.plugins"

DIR=$(cd $(dirname $0) && pwd)
if [ $(basename $DIR) == "bin" ]; then
  DIR=$(cd ${DIR}/.. && pwd)
fi

if [ "$DIR" != "$HOME/.vim" ]; then
  dot_file=$HOME/.vim
  if [ ! -e $dot_file ]; then
    echo "Detected clone outside of ~/.vim, symlinking"
    ln -s $DIR $dot_file
  fi
fi

if which nvim > /dev/null; then
  echo "You'll want to check this out to set up deoplete: https://github.com/tweekmonster/nvim-python-doctor/wiki/Advanced:-Using-pyenv"
  mkdir -p ${XDG_CONFIG_HOME:=$HOME/.config}
  if [ ! -e $XDG_CONFIG_HOME/nvim ]; then
    ln -s $DIR $XDG_CONFIG_HOME/nvim
  fi
fi

pushd $DIR

git submodule update --init --recursive

for file in $LOCALS; do
  dot_file=$HOME/$file
  touch $dot_file
done

for file in $FILES_TO_LINK; do
  dot_file=$HOME/.$file
  if [ ! -e $dot_file ]; then
    ln -s $DIR/$file $dot_file
  fi
done

if [ "$(uname)" == "Darwin" ]; then
  VIM_UPDATE_PATH=/usr/local/bin
elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
  VIM_UPDATE_PATH=$HOME/bin
fi

if [ -L $VIM_UPDATE_PATH/vim-update ]; then
  rm -f $VIM_UPDATE_PATH/vim-update
fi

if [ ! -L $VIM_UPDATE_PATH/vim-update ]; then
  mkdir -p $VIM_UPDATE_PATH
  ln -s $DIR/bin/update $VIM_UPDATE_PATH/vim-update
fi

green='\033[0;32m'
yellow='\033[0;33m'
bold=`tput bold`
normal=`tput sgr0`
end_color='\033[0;m'

vim +'silent! PlugClean!|' +'qall!'

if which nvim > /dev/null; then
  nvim +'silent! PlugClean!|' +'qall!'
fi

vimcmd=""
if [ $UPDATE == 1 ]; then
  vimcmd=$vimcmd"silent! PlugUpdate!|"
else
  vimcmd=$vimcmd"silent! PlugInstall!|"
fi

if [ $INTERACTIVE == 1 ] ; then
  vim +"$vimcmd" +'qall!'
else
  vim +"$vimcmd" +'qall!' > /dev/null
fi

if which nvim > /dev/null; then
  if [ $INTERACTIVE == 1 ] ; then
    nvim +"$vimcmd" +'qall!'
  else
    nvim +"$vimcmd" +'qall!' > /dev/null
  fi
fi

popd
